{"/shortcodes/":{"data":{"":"Here are examples of the shortcodes","badge#Badge":"Code:\n{{\u003c badge \"Badge\" \u003e}} Output: Badge Variants:\n{{\u003c badge content=\"info\" type=\"info\" \u003e}} {{\u003c badge content=\"warning\" type=\"warning\" \u003e}} {{\u003c badge content=\"error\" type=\"error\" \u003e}} Result:\ninfo warning error With link and icon:\n{{\u003c badge content=\"Releases\" link=\"https://github.com/imfing/hextra/releases\" icon=\"github\" \u003e}} Result:\nReleases ","callout#Callout":" üëæ A callout is a short piece of text intended to attract attention. ‚ÑπÔ∏è A callout is a short piece of text intended to attract attention. ‚ö†Ô∏è A callout is a short piece of text intended to attract attention. üö´ A callout is a short piece of text intended to attract attention. Default üåê Hugo can be used to create a wide variety of websites, including blogs, portfolios, documentation sites, and more. {{\u003c callout emoji=\"üåê\" \u003e}} Hugo can be used to create a wide variety of websites, including blogs, portfolios, documentation sites, and more. {{\u003c /callout \u003e}} Info ‚ÑπÔ∏è Please visit GitHub to see the latest releases. {{\u003c callout type=\"info\" \u003e}} Please visit GitHub to see the latest releases. {{\u003c /callout \u003e}} Warning ‚ö†Ô∏è This API will be deprecated in the next version. {{\u003c callout type=\"warning\" \u003e}} A **callout** is a short piece of text intended to attract attention. {{\u003c /callout \u003e}} Error üö´ Something went wrong and it‚Äôs going to explode. {{\u003c callout type=\"error\" \u003e}} Something went wrong and it's going to explode. {{\u003c /callout \u003e}} ","cards#Cards":" Callout Card with tag custom tag No Icon Image CardInternet Image Local ImageRaw image under static directory. Local ImageImage under assets directory, processed by Hugo. {{\u003c cards \u003e}} {{\u003c card link=\"../callout\" title=\"Callout\" icon=\"warning\" \u003e}} {{\u003c card link=\"../callout\" title=\"Card with tag\" icon=\"tag\" tag= \"A custom tag\" \u003e}} {{\u003c card link=\"/\" title=\"No Icon\" \u003e}} {{\u003c /cards \u003e}} {{\u003c cards \u003e}} {{\u003c card link=\"/\" title=\"Image Card\" image=\"https://source.unsplash.com/featured/800x600?landscape\" subtitle=\"Unsplash Landscape\" \u003e}} {{\u003c card link=\"/\" title=\"Local Image\" image=\"/images/card-image-unprocessed.jpg\" subtitle=\"Raw image under static directory.\" \u003e}} {{\u003c card link=\"/\" title=\"Local Image\" image=\"images/space.jpg\" subtitle=\"Image under assets directory, processed by Hugo.\" method=\"Resize\" options=\"600x q80 webp\" \u003e}} {{\u003c /cards \u003e}} Card Parameters Parameter Description link URL (internal or external). title Title heading for the card. subtitle Subtitle heading (supports Markdown). icon Name of the icon. tag Text in tag. tagColor Color of the tag: gray (default), yellow, red and blue. Image Card Additionally, the card supports adding image and processing through these parameters:\nParameter Description image Specifies the image URL for the card. method Sets Hugo‚Äôs image processing method. options Configures Hugo‚Äôs image processing options. Card supports three kinds of images:\nRemote image: the full URL in the image parameter. Static image: use the relative path in Hugo‚Äôs static/ directory. Processed image: use the relative path in Hugo‚Äôs assets/ directory. Hextra auto-detects if image processing is needed during build and applies the options parameter or default settings (Resize, 800x, Quality 80, WebP Format). It currently supports these method: Resize, Fit, Fill and Crop.\nFor more on Hugo‚Äôs built in image processing commands, methods, and options see their Image Processing Documentation.\nTags Card supports adding tags which could be useful to show extra status information.\nCard with default tag tag text Card with error tag tag text Card with info tag tag text Card with warning tag tag text Image CardInternet Image tag text {{\u003c cards \u003e}} {{\u003c card link=\"../callout\" title=\"Card with default tag color\" tag=\"tag text\" \u003e}} {{\u003c card link=\"../callout\" title=\"Card with default red tag\" tag=\"tag text\" tagType=\"error\" \u003e}} {{\u003c card link=\"../callout\" title=\"Card with blue tag\" tag=\"tag text\" tagType=\"info\" \u003e}} {{\u003c card link=\"../callout\" title=\"Card with yellow tag\" tag=\"tag text\" tagType=\"warning\" \u003e}} {{\u003c /cards \u003e}} Columns You can specify the maximum number of columns for cards to span by passing the cols parameter to the cards shortcode. Note that columns will still be collapsed on smaller screens.\nTop Card Bottom Card Left Card Right Card {{\u003c cards cols=\"1\" \u003e}} {{\u003c card link=\"/\" title=\"Top Card\" \u003e}} {{\u003c card link=\"/\" title=\"Bottom Card\" \u003e}} {{\u003c /cards \u003e}} {{\u003c cards cols=\"2\" \u003e}} {{\u003c card link=\"/\" title=\"Left Card\" \u003e}} {{\u003c card link=\"/\" title=\"Right Card\" \u003e}} {{\u003c /cards \u003e}} ","details#Details":"A built-in component to display a collapsible content.\nDetails This is an HTML paragraph added to the Markdown file.\nClick me to reveal This will be hidden by default. Usage {{\u003c details title=\"Details\" \u003e}} This is the content of the details. Markdown is **supported**. {{\u003c /details \u003e}} {{\u003c details title=\"Click me to reveal\" closed=\"true\" \u003e}} This will be hidden by default. {{\u003c /details \u003e}} ","file-tree#File Tree":" content _index.md docs _index.md introduction.md introduction.fr.md hugo.toml Usage Markdown{{\u003c filetree/container \u003e}} {{\u003c filetree/folder name=\"content\" \u003e}} {{\u003c filetree/file name=\"_index.md\" \u003e}} {{\u003c filetree/folder name=\"docs\" state=\"closed\" \u003e}} {{\u003c filetree/file name=\"_index.md\" \u003e}} {{\u003c filetree/file name=\"introduction.md\" \u003e}} {{\u003c filetree/file name=\"introduction.fr.md\" \u003e}} {{\u003c /filetree/folder \u003e}} {{\u003c /filetree/folder \u003e}} {{\u003c filetree/file name=\"hugo.toml\" \u003e}} {{\u003c /filetree/container \u003e}} ","icons#Icons":"To use this shortcode inline, inline shortcode needs to be enabled in the config:\nhugo.yamlenableInlineShortcodes: true List of available icons can be found in data/icons.yaml.\nUsage {{\u003c icon \"github\" \u003e}} Heroicons v1 outline icons are available out of the box.\nHow to add your own icons Create data/icons.yaml file, then add your own SVG icons in the following format:\ndata/icons.yamlyour-icon: \u003csvg\u003eyour icon svg content\u003c/svg\u003e It then can be used in the shortcode like this:\n{{\u003c icon \"your-icon\" \u003e}} {{\u003c card icon=\"your-icon\" \u003e}} Tip: Iconify Design is a great place to find SVG icons for your site.","pdf#PDF":"With PDF shortcode, you can embed a PDF file in your content.\n{{\u003c pdf \"https://example.com/sample.pdf\" \u003e}} You can also place the PDF file in your project directory and use the relative path.\n{{\u003c pdf \"path/to/file.pdf\" \u003e}} Example:","tabs#Tabs":" JSONYAMLTOML JSON: JavaScript Object Notation (JSON) is a standard text-based format for representing structured data based on JavaScript object syntax. YAML: YAML is a human-readable data serialization language. TOML: TOML aims to be a minimal configuration file format that's easy to read due to obvious semantics. Default {{\u003c tabs items=\"JSON,YAML,TOML\" \u003e}} {{\u003c tab \u003e}}\u003cstrong\u003eJSON\u003c/strong\u003e: JavaScript Object Notation (JSON) is a standard text-based format for representing structured data based on JavaScript object syntax.{{\u003c /tab \u003e}} {{\u003c tab \u003e}}\u003cstrong\u003eYAML\u003c/strong\u003e: YAML is a human-readable data serialization language.{{\u003c /tab \u003e}} {{\u003c tab \u003e}}\u003cstrong\u003eTOML\u003c/strong\u003e: TOML aims to be a minimal configuration file format that's easy to read due to obvious semantics.{{\u003c /tab \u003e}} {{\u003c /tabs \u003e}} Specify Selected Index Use defaultIndex property to specify the selected tab. The index starts from 0.\n{{\u003c tabs items=\"JSON,YAML,TOML\" defaultIndex=\"1\" \u003e}} {{\u003c tab \u003e}}\u003cstrong\u003eJSON\u003c/strong\u003e: JavaScript Object Notation (JSON) is a standard text-based format for representing structured data based on JavaScript object syntax.{{\u003c /tab \u003e}} {{\u003c tab \u003e}}\u003cstrong\u003eYAML\u003c/strong\u003e: YAML is a human-readable data serialization language.{{\u003c /tab \u003e}} {{\u003c tab \u003e}}\u003cstrong\u003eTOML\u003c/strong\u003e: TOML aims to be a minimal configuration file format that's easy to read due to obvious semantics.{{\u003c /tab \u003e}} {{\u003c /tabs \u003e}} The YAML tab will be selected by default.\nJSONYAMLTOML JSON: JavaScript Object Notation (JSON) is a standard text-based format for representing structured data based on JavaScript object syntax. YAML: YAML is a human-readable data serialization language. TOML: TOML aims to be a minimal configuration file format that's easy to read due to obvious semantics. ","youtube#YouTube":"Embed a YouTube video.\n{{\u003c youtube VIDEO_ID \u003e}} Result:\nFor more information, see Hugo‚Äôs YouTube Shortcode."},"title":"Shortcodes"}}